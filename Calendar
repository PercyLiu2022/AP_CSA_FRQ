public class APCalendar
{
	/** Returns true if year is a leap year and false otherwise. */
	private static boolean isLeapYear(int year)
	{ /* implementation not shown */ }
	
	/** Returns the number of leap years between year1 and year2, inclusive.
	* Precondition: 0 <= year1 <= year2
	*/
	public static int numberOfLeapYears(int year1, int year2)
	{
		int count = 0; //counts leapyear's
		for(int i = year1; i <= year2; i++) {//starts loop at years1 and ends at years2 (inclusive)
			if(isLeapYear(year1) == true) {//if year1 is a leapyear
				count++; //add 1 to counter
			}
		}
		return count; //return how many leap years
	}
	
	/** Returns the value representing the day of the week for the first day of year,
	* where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday.
	*/
	private static int firstDayOfYear(int year)
	{ /* implementation not shown */ }
	
	/** Returns n, where month, day, and year specify the nth day of the year.
	* Returns 1 for January 1 (month = 1, day = 1) of any year.
	* Precondition: The date represented by month, day, year is a valid date.
	*/
	private static int dayOfYear(int month, int day, int year)
	{ /* implementation not shown */ }
	
	/** Returns the value representing the day of the week for the given date
	* (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ...,
	* and 6 denotes Saturday.
	* Precondition: The date represented by month, day, year is a valid date.
	*/
	public static int dayOfWeek(int month, int day, int year)
	{
		int start = firstDayOfYear(year); //first day of the year is a monday or tuesday .... 0, 1, 2, 3, 4, 5, 6
		int dayInYear = dayOfYear(month, day, year); //the day of the year
		
		int dayOfWeek = (start + dayInYear -1) % 7; //day of the year (0-6) + day -1 and then find the remainder
		
		return dayOfWeek; //return day of the week
	}
	
	// There may be instance variables, constructors, and other methods not shown.
	//by Percy
}
